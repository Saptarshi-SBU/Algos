#
#  Count SubArrays with Product Less than K
#
#  Version of Counting Contiguous Pairs that can be formed with a given sub-array
#  We cannot store the count directly from a given-subarray length. We accumulate
#  the count based on what was generated by the newly added element.
#  
#  Complexity : O(N)
#
#  https://leetcode.com/submissions/detail/412114671/

#not used
def num_possible_subarrays(arr_len):
	#[1] -> 1
	#[1,2] -> 3 (1 + 2)
	#[1,2,3] -> 6 (1 + 2 + 3)
	#[1,2,3,4] -> 10 (1 + 2 + 3 + 4)
	#[1,2,3,4,5] -> 15 (1 + 2 + 3 + 4 + 5)
	return arr_len * (arr_len + 1) / 2 

def count_num_subarrays_lessthanK(arr, K):
	prod = 1
	sub_array = []
	count = 0
	for i in range(len(arr)):
		if (prod * arr[i]) < K:
			prod = prod * arr[i]
			sub_array.append(arr[i])
			#for each new element, count number of possible pairs with remaining elements
			#in the sub-array (which is equal to the number of elements in the sub-array)
			count = count + len(sub_array)
			print 'count :{} {}'.format(count, sub_array)
		else:
			print sub_array
			while len(sub_array) > 0:
				val = sub_array.pop(0)
				prod = prod / val
				if (prod * arr[i]) < K:
					prod = prod * arr[i]
					sub_array.append(arr[i])
					count = count + len(sub_array)
					print 'count :{} {}'.format(count, sub_array)
					break
	print sub_array
	return count

arr = [ 1,2,3,4,5 ]
print count_num_subarrays_lessthanK(arr, 6)

arr = [ 1,2,3,4,5 ]
print count_num_subarrays_lessthanK(arr, 12)

arr = [ 1,2,3,4,5,1 ]
print count_num_subarrays_lessthanK(arr, 12)

arr = [ 10, 5, 2, 6 ]
print count_num_subarrays_lessthanK(arr, 100)

arr = [ 1, 5, 2, 3, 1, 4, 2 ]
print count_num_subarrays_lessthanK(arr, 8)
